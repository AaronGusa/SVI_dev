import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { LoadingComponent } from '../../features/loading/loading.component';
import { ZipSearchComponent } from './bus-searchers/zip-search/zip-search.component';
import { ServiceSearchComponent } from './bus-searchers/service-search/service-search.component';
import { CitySearchComponent } from './bus-searchers/city-search/city-search.component';
import { BusinessService, ServiceService } from '../../app-services';
import { Business } from '../../models/business.model';
import { Service } from '../../models/service.model';
import { Category } from '../../models/category.model';
import { RefineSearchMenuComponent } from '../../features/refine-search-menu/refine-search-menu.component';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatButton } from '@angular/material/button';
import { RouterModule } from '@angular/router';


@Component({
  selector: 'app-find-business',
  standalone: true,
  imports: [ReactiveFormsModule,
            LoadingComponent, 
            CitySearchComponent, 
            ServiceSearchComponent, 
            ZipSearchComponent,
            RefineSearchMenuComponent,
            MatExpansionModule,
            MatButton,
            RouterModule  
          ],
  templateUrl: './find-business.component.html',
  styleUrl: './find-business.component.css'
})
export class FindBusinessComponent implements OnInit, AfterViewInit {
  @ViewChild('auto') auto!: MatAutocompleteModule;
  myControl = new FormControl('');

  loading: Boolean = true;
  selectedZip: Boolean = false;
  formcontrol = new FormControl('');
  // Business Variables
  businesses: Business[] = [];
  businessListFiltered: Business[] = [];
  // Categories and Services Variables
  // categories: Category[] = [];
  categories: any = [];
  servicesData: any = [];
  services: any = [];
  selectedServices: any[] = [];
  // Zip and City Variables
  zipList: any[] = [];
  zipListFiltered: any[] = [];
  zipSelect: string = '';
  cityList: any[] = [];
  cityListFiltered: any[] = [];
  citySelect: string = '';
  zipFieldSelected: boolean = true;
  cityFieldSelected: boolean = true;

  // Refine Search Variables
  noSearch: boolean = true;
  sortName: boolean = false;
  sortRating: number = 0;
  sortActiveOnly: boolean = false;

  

  constructor(
    private businessService: BusinessService,
    private serviceService: ServiceService,
  ) {}

  async ngOnInit() {
    await this.fetchData();
    this.businessListFiltered = this.businesses;
    //console.log(this.businessListFiltered)
  }

  ngAfterViewInit() {
    this.businessListFiltered = this.businesses;
  }

  onInput() {
    this.selectedZip = true;
  }

  // async fetchData() {
  //   try {
  //     const fetchedBusinesses = await this.businessService.fetchBusinesses().toPromise();
  //     const fetchedCategories = await this.serviceService.fetchCategories().toPromise();
      

  //     if (fetchedBusinesses !== undefined) {
  //       this.businesses = fetchedBusinesses;
  //     }; 

  //     if (fetchedCategories !== undefined) {
  //       this.categories = fetchedCategories;
  //     };

  //     this.createZipList();
  //     this.createCityList();
      
  //     if (this.zipList.length >= 1 && this.cityList.length >= 1) {
  //       // console.log('Ziplist line 99');
  //       // console.log(this.zipList);
  //       // console.log('CityList Line 101');
  //       // console.log(this.cityList);
  //       this.loading = false;
  //     }
      
  //     //console.log(this.businesses);
  //     console.log(this.categories);
    
  //   } catch (error) {
  //     console.error('Error fetching data:', error);
  //   }
  // }

  // async fetchData() {
  //   try {
  //     const fetchedBusinesses = await this.businessService.fetchBusinesses().toPromise();
  //     await this.serviceService.fetchServicesSub().subscribe({
  //       next: categories => {
  //         this.categories = categories;
  //         //console.log(this.categories)
  //         this.createZipList();
  //         this.createCityList();
  //         if (this.zipList.length >= 1 && this.cityList.length >= 1) {
  //           // console.log('Ziplist line 99');
  //           // console.log(this.zipList);
  //           // console.log('CityList Line 101');
  //           // console.log(this.cityList);
            
  //           this.loading = false;
  //         }
  //       },
  //       error: error => {
  //         console.error('Error fetching categories:', error);
  //         // Handle error, e.g., display error message
  //       }
        
  //     });

  //     await this.serviceService.fetchCategories().subscribe({
  //       next: services => {
  //         this.servicesData = services;
  //         console.log("Services COMPO")
          
  //       },
  //       error: error => {
  //         console.error('Error fetching categories:', error);
  //         // Handle error, e.g., display error message
  //       }});

        
  //     if (fetchedBusinesses !== undefined) {
  //       this.businesses = fetchedBusinesses;

  //     }

  //     if (this.servicesData && this.businesses) {
  //       this.addServiceNamesToBusinesses(this.servicesData, this.businesses)
  //     } else {
  //       console.log("There's no services or businesses")
  //     }

  //   } catch (error) {
  //     console.error('Error fetching data:', error);
  //     // Handle error, e.g., display error message
  //   }
  // }

  async fetchData() {
    try {
      const fetchedBusinesses = await this.businessService.fetchBusinesses().toPromise();
  
      // Fetch categories
      const categories = await this.serviceService.fetchCategories().toPromise();
      this.categories = categories;
      this.serviceService.fetchServicesSub().subscribe({
              next: categories => {
                this.categories = categories;
                //console.log(this.categories)
                this.createZipList();
                this.createCityList();
                if (this.zipList.length >= 1 && this.cityList.length >= 1) {
                  // console.log('Ziplist line 99');
                  // console.log(this.zipList);
                  // console.log('CityList Line 101');
                  // console.log(this.cityList);
                  
                  this.loading = false;
                }
              },
              error: error => {
                console.error('Error fetching categories:', error);
                // Handle error, e.g., display error message
              }
      })
  
      // Now that both businesses and services are fetched, call addServiceNamesToBusinesses
      if (fetchedBusinesses !== undefined && this.servicesData !== undefined) {
        this.businesses = fetchedBusinesses;
        this.addServiceNamesToBusinesses(this.servicesData, this.businesses);
      
  
      // Continue with other operations like creating zip list, city list, etc.
        this.createZipList();
        this.createCityList();
        if (this.zipList.length >= 1 && this.cityList.length >= 1) {
          this.loading = false;
      }}
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  createZipList() {
    this.zipList = [...new Set(this.businesses.map((business) => business.b_zip))];
    this.zipList.sort((a, b) => parseInt(a) - parseInt(b));
  }

  createCityList() {
    this.cityList = [...new Set(this.businesses.map((business) => business.b_city))];
    this.cityList.sort((a, b) => parseInt(a) - parseInt(b));
  }

  handleCombinedFilters() {
    const zipSelect = this.zipSelect || '';
    const citySelect = this.citySelect || '';
  
    if (zipSelect.trim() === '' && citySelect.trim() === '') {
      this.businessListFiltered = this.businesses;
    } else {
      // Filter based on zip and city
      this.businessListFiltered = this.businesses.filter(business =>
        (!zipSelect || business.b_zip.toLowerCase().includes(zipSelect.toLowerCase())) &&
        (!citySelect || business.b_city.toLowerCase().includes(citySelect.toLowerCase()))
      );
    }

    if (this.selectedServices && this.selectedServices.length > 0) {
      this.businessListFiltered = this.businessListFiltered.filter(business =>
        business.b_services && Array.isArray(business.b_services) && // Check if b_services is an array
        this.selectedServices.some(serviceId =>
          business.b_services.includes(serviceId)
        )
      );
  
      //  this.businessListFiltered = this.businessListFiltered.filter(business =>
      //   this.selectedServices.some(serviceId =>
      //     business.b_services.includes(serviceId)
      //   )
      //   )

      //   };
    } 
    // else {
    //   console.log('No services found');
    // }
     // Call the new sorting and filtering function
     this.handleSortingAndFiltering();

  }

  applyFilters(filters: { zip: string, city: string, selectedServices: number[] }) {
    let { zip, city, selectedServices = [] } = filters;
    
    if (this.zipSelect !== '' && zip === undefined) {
      filters.zip = this.zipSelect;
    } else {
      this.zipSelect = zip;
    };

    if (this.citySelect !== '' && city === undefined) {
      filters.city = this.citySelect;
    } else { 
      this.citySelect = city;
    }

    this.selectedServices = filters.selectedServices;

    
    //console.log(filters.selectedServices);

    this.handleCombinedFilters();
  }

  handleSortingAndFiltering() {
    let filteredList = this.businessListFiltered.slice(); // Create a copy of the list

    if (this.sortName) {
      const searchTerm = "the ";
      filteredList.sort((a, b) => 
          //a.b_name.localeCompare(b.b_name));
          {
            const nameA = a.b_name.toLowerCase().startsWith(searchTerm) ? a.b_name.slice(searchTerm.length) : a.b_name;
            const nameB = b.b_name.toLowerCase().startsWith(searchTerm) ? b.b_name.slice(searchTerm.length) : b.b_name;
        
            return nameA.localeCompare(nameB);
          })
    }

    if (this.sortRating > 0) {
      filteredList = filteredList.filter(business => business.b_rating >= this.sortRating);
      filteredList.sort((a, b) => b.b_rating - a.b_rating);
    } else if (this.sortRating === 0 ) {
      filteredList = this.businesses;
    }

    if (this.sortActiveOnly) {
      filteredList = filteredList.filter(business => business.b_active);
    }

    this.businessListFiltered = filteredList;
  }

  onSearchSelected() {

    this.noSearch = false;
  }

  onCityFieldSelected() {
    this.noSearch = false;
  }

  

  applyFilterByName(value: boolean) {
    this.sortName = value;
    this.handleCombinedFilters();
  }
  
  applyRatingFilter(value: number) {
    this.sortRating = value;
    //console.log('Entered sortRatingFilter CONFIRMED')
    this.handleCombinedFilters();
  }
  
  applyShowActiveOnly(value: boolean) {
    this.sortActiveOnly = value;
    this.handleCombinedFilters();
  }

  getServiceName(s_id: number) {
    const service = this.servicesData.find(category => category.s_id === s_id);
    return service ? service.s_name : '';
  }

  addServiceNamesToBusinesses(services: any[], businesses: any[]) {
    // businesses.forEach(business => {
    //     business.b_services.forEach((serviceId, index) => {
    //         const service = services.find(s => s.s_id === serviceId);
    //         if (service) {
    //             business.b_services[index] = { s_id: serviceId, s_name: service.s_name };
    //         }
    //     });

    //     // Sort the b_services array by s_name
    //     business.b_services.sort((a, b) => a.s_name.localeCompare(b.s_name));
    // });

    // console.log(this.businesses);
}

  // preprocessBusinessList() {
  //   this.businessListFiltered.forEach(business => {
  //     business.sortedServiceNames = business.b_services
  //       .map(serviceId => this.getServiceName(serviceId))
  //       .sort();
  //   });
  // }

}
